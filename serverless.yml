
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: story-builder
plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

custom:
  webpackIncludeModules: true
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  logs:
    restApi: true
  apiGateway:
    logs: true
  timeout: 20

# you can overwrite defaults here
  stage: dev
#  region: us-east-1
  environment:
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    PLAYERS_DB: ${env:PLAYERS_DB}
    ROOMS_DB: ${env:ROOMS_DB}
    STORIES_DB: ${env:STORIES_DB}
    SNS_TOPIC: ${env:SNS_TOPIC}
    SNS_TOPIC_ARN: ${env:SNS_TOPIC_ARN}
    MESSAGES_QUEUE: ${env:MESSAGES_QUEUE}
    MESSAGES_QUEUE_URL: ${env:MESSAGES_QUEUE_URL}
    TWILIO_NUMBER: ${env:TWILIO_NUMBER}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  poller:
    handler: poller.main
    environment:
      # TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
      # TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
      MESSAGES_LAMBDA: "${self:service}-${self:provider.stage}-message"
    events:
      - sqs: 
          arn: arn:aws:sqs:us-east-1:574024764028:story-builder-messages-queue.fifo	
          batchSize: 10
  message:
    handler: messages.main
    #    Define function environment variables here
    environment:
      # TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
      # TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
      POLLER_LAMBDA: "${self:service}-${self:provider.stage}-poller"
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: messages
          method: post
          integration: lambda
          # request:
          #   passThrough: WHEN_NO_TEMPLATES
          #   template:
          #     'application/x-www-form-urlencoded': "${file(./integration-request-template.vtl)}"
          # response:
          #   template:
          #     'application/xml': "${file(./integration-response-template.vtl)}"
          # methodResponses:
          #   responseModels:
          #     'application/xml': Empty
          #     statusCode: 200
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
      - sns: ${self:provider.environment.SNS_TOPIC}
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

# database:
#   component: '@serverless/aws-dynamodb'
#   inputs:
#     region: us-east-1
#     attributeDefinitions:
#       - AttributeName: 'pk'
#         AttributeType: 'S'
#     keySchema:
#       - AttributeName: 'pk'
#         KeyType: 'HASH'
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
